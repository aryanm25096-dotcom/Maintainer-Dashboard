// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  avatarUrl   String?
  githubUsername String?
  isMaintainer Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  sessions        Session[]
  prReviews       PRReview[]
  issueTriage     IssueTriage[]
  mentorship      MentorshipActivity[]
  contributions   Contribution[]
  repositories    Repository[]
  communityImpact CommunityImpact[]
  impactMetrics   ImpactMetric[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Repository {
  id          String   @id @default(cuid())
  name        String
  fullName    String   @unique
  description String?
  url         String
  language    String?
  stars       Int      @default(0)
  forks       Int      @default(0)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  prReviews   PRReview[]
  issues      Issue[]
  contributions Contribution[]
  impactMetrics ImpactMetric[]
  snapshots   RepositorySnapshot[]

  @@map("repositories")
}

model PRReview {
  id          String   @id @default(cuid())
  prNumber    Int
  title       String
  body        String?
  state       String   // "APPROVED", "CHANGES_REQUESTED", "COMMENTED"
  sentiment   String?  // "POSITIVE", "NEUTRAL", "NEGATIVE"
  sentimentScore Float?
  url         String
  createdAt   DateTime
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId String
  repository  Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("pr_reviews")
}

model Issue {
  id          String   @id @default(cuid())
  number      Int
  title       String
  body        String?
  state       String   // "OPEN", "CLOSED"
  labels      String[] // Array of label names
  url         String
  createdAt   DateTime
  updatedAt   DateTime
  closedAt    DateTime?

  // Relations
  repositoryId String
  repository  Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  triage      IssueTriage[]

  @@map("issues")
}

model IssueTriage {
  id          String   @id @default(cuid())
  action      String   // "LABELED", "ASSIGNED", "COMMENTED", "CLOSED"
  label       String?
  assignee   String?
  comment    String?
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueId     String
  issue       Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("issue_triage")
}

model MentorshipActivity {
  id          String   @id @default(cuid())
  type        String   // "REVIEW", "COMMENT", "GUIDANCE", "COLLABORATION"
  description String
  mentee      String?  // GitHub username of mentee
  url         String?
  impact      String?  // "HIGH", "MEDIUM", "LOW"
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentorship_activities")
}

model Contribution {
  id          String   @id @default(cuid())
  type        String   // "COMMIT", "PR", "ISSUE", "REVIEW", "DISCUSSION"
  title       String
  description String?
  url         String
  additions   Int?
  deletions   Int?
  changedFiles Int?
  createdAt   DateTime

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId String
  repository  Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model CommunityImpact {
  id          String   @id @default(cuid())
  period      String   // "WEEKLY", "MONTHLY", "YEARLY"
  startDate   DateTime
  endDate     DateTime
  
  // Metrics
  prReviews   Int      @default(0)
  issuesTriage Int     @default(0)
  mentorship  Int      @default(0)
  contributions Int    @default(0)
  repositories Int     @default(0)
  
  // Calculated scores
  maintainerScore Float @default(0)
  communityScore  Float @default(0)
  leadershipScore Float @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("community_impact")
}

model Contributor {
  id          String   @id @default(cuid())
  githubUsername String @unique
  name        String?
  email       String?
  avatarUrl   String?
  firstContribution DateTime
  lastActivity DateTime?
  totalContributions Int @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  mentorshipActivities MentorshipActivity[]
  contributions       Contribution[]
  impactMetrics       ImpactMetric[]

  @@map("contributors")
}

model ImpactMetric {
  id          String   @id @default(cuid())
  period      String   // "WEEKLY", "MONTHLY", "YEARLY"
  startDate   DateTime
  endDate     DateTime
  
  // Contributor metrics
  newContributors Int @default(0)
  returningContributors Int @default(0)
  contributorRetentionRate Float @default(0)
  contributorGrowthRate Float @default(0)
  
  // Repository health metrics
  issuesResolved Int @default(0)
  prsMerged Int @default(0)
  activityGrowth Float @default(0)
  repositoryHealthScore Float @default(0)
  
  // Mentorship metrics
  mentorshipScore Float @default(0)
  contributorQualityImprovement Float @default(0)
  longTermImpactScore Float @default(0)
  
  // Overall impact
  overallImpactScore Float @default(0)
  predictedLongTermImpact Float @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributorId String?
  contributor Contributor? @relation(fields: [contributorId], references: [id], onDelete: SetNull)
  repositoryId String?
  repository Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)

  @@map("impact_metrics")
}

model RepositorySnapshot {
  id          String   @id @default(cuid())
  repositoryId String
  snapshotDate DateTime
  
  // Repository metrics
  stars       Int
  forks       Int
  issues      Int
  pullRequests Int
  contributors Int
  activityScore Float
  
  // Health indicators
  issueResolutionRate Float
  prMergeRate Float
  contributorRetention Float
  communityEngagement Float
  
  createdAt   DateTime @default(now())

  // Relations
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("repository_snapshots")
}
